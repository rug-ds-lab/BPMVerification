<bpmSpecification>
	<specificationTypes>
		<specificationType id="AlwaysResponse">
			<inputs>
				<input type="or">p</input>
				<input type="or">q</input>
			</inputs>
			<formulas>
				<formula language="CTLSPEC">AG (p -> AF q)</formula>
			</formulas>
			<message
					hold = "p is always eventually followed by q"
					fail = "p is not always eventually followed by q" />
		</specificationType>
		
		<specificationType id="AlwaysImmediateResponse">
			<inputs>
				<input type="or">p</input>
				<input type="or">q</input>
				<input type="or">s</input>
			</inputs>
			<formulas>
                <formula language="CTLSPEC">AG( p -> A [(p | s) U q])</formula>
			</formulas>
			<message
					hold = "p is always immediately followed by q"
					fail = "p is not always immediately followed by q" />
		</specificationType>
		
		<specificationType id="AlwaysImmediatePrecedence">
			<inputs>
				<input type="or">p</input>
				<input type="or">q</input>
			</inputs>
			<formulas>
                <formula language="CTLSPEC">!E [!p U q]</formula>
			</formulas>
			<message
					hold = "q is always preceded by p"
					fail = "q is not always preceded by p" />
		</specificationType>
		
		<specificationType id="ExistImmediateResponse">
			<inputs>
				<input type="or">p</input>
				<input type="or">q</input>
				<input type="or">s</input>
			</inputs>
			<formulas>
                <formula language="CTLSPEC">AG (p -> E [(p | s) U q])</formula>
			</formulas>
			<message
					hold = "p is immediately followed by q"
					fail = "p is not immediately followed by q" />
		</specificationType>
		
		<specificationType id="ExistResponse">
			<inputs>
				<input type="or">p</input>
				<input type="or">q</input>
			</inputs>
			<formulas>
                <formula language="CTLSPEC">AG (p -> EF q)</formula>
			</formulas>
			<message
					hold = "p is eventually followed by q"
					fail = "p is not eventually followed by q" />
		</specificationType>
		
		<specificationType id="AlwaysConflict">
			<inputs>
				<input type="or">p</input>
				<input type="or">q</input>
			</inputs>
			<formulas>
                <formula language="CTLSPEC">AG (p -> AG !q)</formula>
			</formulas>
			<message
					hold = "p is never followed by q"
					fail = "p is eventually followed by q" />
		</specificationType>
		
		<specificationType id="AlwaysParallel">
			<inputs>
				<input type="and">p</input>
			</inputs>
			<formulas>
                <formula language="CTLSPEC">AG p</formula>
			</formulas>
			<message
					hold = "p are parallel"
					fail = "p are not parallel" />
		</specificationType>
		
		<specificationType id="ExistParallel">
			<inputs>
				<input type="and">p</input>
			</inputs>
			<formulas>
                <formula language="CTLSPEC">EF p</formula>
			</formulas>
			<message
					hold = "p are sometimes parallel"
					fail = "p are never parallel" />
		</specificationType>

		<specificationType id="NeverParallel">
			<inputs>
				<input type="or">p</input>
				<input type="and">q</input>
			</inputs>
			<formulas>
                <formula language="CTLSPEC">AG (p -> AG (!q))</formula>
			</formulas>
			<message
					hold = "q are never parallel when p holds"
					fail = "q may be parallel when p holds" />
		</specificationType>
		
		<specificationType id="NeverParallelAnd">
			<inputs>
				<input type="or">p</input>
				<input type="and">q</input>
			</inputs>
			<formulas>
                <formula language="CTLSPEC">AG (p -> AG (!q))</formula>
			</formulas>
			<message
					hold = "q are never parallel when p holds"
					fail = "q may be parallel when p holds" />
		</specificationType>
		
		<specificationType id="Fairness">
			<inputs>
				<input type="or">p</input>
			</inputs>
			<formulas>
				<formula language="FAIRNESS">!p</formula>
			</formulas>
			<message
					hold = "p is fair"
					fail = "p is not fair" />
		</specificationType>

		<specificationType id="AlwaysEventualResponse">
			<inputs>
				<input type="and">p</input>
				<input type="and">q</input>
			</inputs>
			<formulas>
                <formula language="LTLSPEC">G (p -> F (q))</formula>
			</formulas>
			<message
					hold = "p is eventually followed by q"
					fail = "p is not eventually followed by q" />
		</specificationType>

		<specificationType id="NeverEventualResponse">
			<inputs>
				<input type="and">p</input>
				<input type="and">q</input>
			</inputs>
			<formulas>
                <formula language="LTLSPEC">G (p -> X (G (!q)))</formula>
			</formulas>
			<message
					hold = "p is never eventually followed by q"
					fail = "p may be eventually followed by q" />
		</specificationType>
		
		<specificationType id="Cooccurrence">
			<inputs>
				<input type="and">p</input>
				<input type="and">q</input>
			</inputs>
			<formulas>
                <formula language="LTLSPEC">G (p -> F (q) | H (q))</formula>
			</formulas>
			<message
					hold = "p implies q"
					fail = "p does not always imply q" />
		</specificationType>
		
		<specificationType id="NoCooccurrence">
			<inputs>
				<input type="and">p</input>
				<input type="and">q</input>
				<input type="or">r</input>
			</inputs>
			<formulas>
                <formula language="LTLSPEC">F (p) -> G (!q | F (r))</formula>
			</formulas>
			<message
					hold = "p does not imply q except when r"
					fail = "p may imply q without r" />
		</specificationType>
				
				
		<specificationType id="NoEventualCooccurrence">
			<inputs>
				<input type="and">p</input>
				<input type="and">q</input>
			</inputs>
			<formulas>
                <formula language="LTLSPEC">G (p -> G (!q))</formula>
			</formulas>
			<message
					hold = "p does not imply q except when r"
					fail = "p may imply q without r" />
		</specificationType>
		
		<specificationType id="RequirementCompensation">
			<inputs>
				<input type="and">p</input>
				<input type="and">q</input>
				<input type="or">r</input>
			</inputs>
			<formulas>
                <formula language="LTLSPEC">G (p -> (H (q) | F (r)))</formula>
			</formulas>
			<message
					hold = "p is preceded by q or succeeded by r"
					fail = "p is not preceded by q or succeeded by r" />
		</specificationType>
		
		<specificationType id="FinalEventualResponse">
			<inputs>
				<input type="and">p</input>
				<input type="and">q</input>
			</inputs>
			<formulas>
                <formula language="LTLSPEC">F (p) -> F (q)</formula>
			</formulas>
			<message
					hold = "p is at least once eventually followed by q"
					fail = "p is never eventually followed by q" />
		</specificationType>


		<specificationType id="ImpliedExclusion">
			<inputs>
				<input type="and">p</input>
				<input type="and">q</input>
			</inputs>
			<formulas>
                <formula language="LTLSPEC">F (p) -> G (!q)</formula>
			</formulas>
			<message
					hold = "p implies that q never occurs"
					fail = "despite p, q still occurs" />
		</specificationType>
	</specificationTypes>
</bpmSpecification>
